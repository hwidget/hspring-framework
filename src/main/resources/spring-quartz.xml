<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <!-- 调度任务 -->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="全类名" />
        <property name="durability" value="true"/>
        <!--<property name="targetMethod" value="execute" />-->
        <!--<property name="concurrent" value="true" /> &ndash;&gt;-->
         <!--<property name="shouldRecover" value="true" /> -->
    </bean>

    <!-- 调度工厂 -->
    <bean id="scheduler" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- 注册JobDetails -->
        <property name="jobDetails">
            <list>
                <ref bean="jobDetail"/>
            </list>
        </property>

        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true"/>

        <!-- 属性 -->
        <property name="quartzProperties">
            <props>
                <!-- 集群要求必须使用持久化存储 -->
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreCMT</prop>
                <prop key="org.quartz.scheduler.instanceName">EventScheduler</prop>
                <!-- 每个集群节点要有独立的instanceId -->
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>

                <!-- Configure ThreadPool -->
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">50</prop>
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <prop key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</prop>
                <!-- Configure JobStore -->
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
                <prop key="org.quartz.jobStore.tablePrefix">SCHEDULER_</prop>
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">10</prop>
                <!-- 开启集群 -->
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
                <prop key="org.quartz.jobStore.dontSetAutoCommitFalse">true</prop>
                <prop key="org.quartz.jobStore.txIsolationLevelSerializable">false</prop>
                <prop key="org.quartz.jobStore.dataSource">myDS</prop>
                <prop key="org.quartz.jobStore.nonManagedTXDataSource">myDS</prop>
                <prop key="org.quartz.jobStore.useProperties">false</prop>
                <!-- Configure Datasources  -->
                <prop key="org.quartz.dataSource.myDS.driver">com.mysql.jdbc.Driver</prop>
                <prop key="org.quartz.dataSource.myDS.URL">${db.url}</prop>
                <prop key="org.quartz.dataSource.myDS.user">${db.username}</prop>
                <prop key="org.quartz.dataSource.myDS.password">${db.password}</prop>
                <prop key="org.quartz.dataSource.myDS.maxConnections">10</prop>
                <prop key="org.quartz.dataSource.myDS.validationQuery">select 0 from dual</prop>
            </props>
        </property>

        <property name="applicationContextSchedulerContextKey" value="applicationContext" />
    </bean>

</beans>
